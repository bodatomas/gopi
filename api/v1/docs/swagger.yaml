basePath: /api/v1/
definitions:
  models.Board:
    properties:
      created_at:
        example: 2024-01-22 17:03:50.283466+00
        type: string
      description:
        example: Board description
        type: string
      id:
        example: 1
        type: integer
      title:
        example: Title
        type: string
      unique_id:
        example: b-1706453613063fa2eb4
        type: string
    type: object
  models.CreateBoardRequest:
    properties:
      description:
        example: My description
        type: string
      team_id:
        example: t-1706453613063fa2eb4
        type: string
      title:
        example: My title
        type: string
    type: object
  models.CreateBoardResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  models.CreateTeamRequest:
    properties:
      name:
        example: My team
        type: string
      workspace_id:
        example: w-1706453613063fa2eb4
        type: string
    type: object
  models.CreateTeamResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  models.CreateWorkspaceRequest:
    properties:
      name:
        example: My workspace
        type: string
      owner:
        example: u-1706453613063fa2eb4
        type: string
    type: object
  models.CreateWorkspaceResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  models.HelloResponse:
    properties:
      message:
        type: string
      status:
        type: integer
      user_id:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: email@email.com
        type: string
      password:
        example: Password123&
        type: string
    type: object
  models.RegisterResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        example: 2024-01-22 17:03:50.283466+00
        type: string
      email:
        example: email@email.com
        type: string
      first_name:
        example: FirstName
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: LastName
        type: string
      password:
        example: hash
        type: string
      role:
        example: Tester
        type: string
      unique_id:
        example: u-1706453613063fa2eb4
        type: string
    type: object
  models.UserWorkspacesResponse:
    properties:
      status:
        type: integer
      workspaces:
        items:
          $ref: '#/definitions/models.WorkspaceResponse'
        type: array
    type: object
  models.WorkspaceResponse:
    properties:
      name:
        example: My workspace
        type: string
      unique_id:
        example: w-1706453613063fa2eb4
        type: string
    type: object
host: localhost:4000
info:
  contact:
    email: tomasboda.dev@gmail.com
    name: Tomáš Boďa
    url: https://github.com/dvandyy
  description: REST api
  title: Gopi API
  version: "1.0"
paths:
  /:
    get:
      description: Retun a hello message if everything is ok
      produces:
      - application/json
      responses:
        "200":
          description: Return 'Hello from gopi!'
          schema:
            $ref: '#/definitions/models.HelloResponse'
      security:
      - JWT_TOKEN: []
      summary: Show a hello message
      tags:
      - Welcome
  /boards/{uid}:
    get:
      description: Return board with unique id
      parameters:
      - description: Board unique ID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Board'
      security:
      - JWT_TOKEN: []
      summary: Get board with UUID
      tags:
      - Boards
  /boards/new:
    post:
      description: Create a new board in database.
      parameters:
      - description: Create board with Title
        in: body
        name: CreateBoardRequest
        required: true
        schema:
          $ref: '#/definitions/models.CreateBoardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateBoardResponse'
      security:
      - JWT_TOKEN: []
      summary: Create new board
      tags:
      - Boards
  /team/new:
    post:
      description: Create a new team in database.
      parameters:
      - description: Create new team with workspace_id and name
        in: body
        name: CreateTeamRequest
        required: true
        schema:
          $ref: '#/definitions/models.CreateTeamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateTeamResponse'
      security:
      - JWT_TOKEN: []
      summary: Create new team
      tags:
      - Teams
  /users/{uid}:
    get:
      description: Return user with unique id
      parameters:
      - description: User unique ID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - JWT_TOKEN: []
      summary: Get user with UUID
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with jwt token
      parameters:
      - description: Login user with Email and Password.
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
      summary: Login user
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create new user in database
      parameters:
      - description: Create user with Email and Password.
        in: body
        name: RegisterRequest
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterResponse'
      summary: Register new user
      tags:
      - Users
  /workspace/new:
    post:
      description: Create a new workspace in database.
      parameters:
      - description: Create new workspace with owner_id and name
        in: body
        name: CreateWorkspaceRequest
        required: true
        schema:
          $ref: '#/definitions/models.CreateWorkspaceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateWorkspaceResponse'
      security:
      - JWT_TOKEN: []
      summary: Create new workspace
      tags:
      - Workspaces
  /workspace/user:
    get:
      description: Return all workspaces for certain user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserWorkspacesResponse'
      security:
      - JWT_TOKEN: []
      summary: Get workspaces for user
      tags:
      - Workspaces
securityDefinitions:
  JWT_TOKEN:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
